version: "3"

services:
  db-mysql-cqrs:
    image: mysql
    container_name: db-mysql-cqrs
    environment:
      MYSQL_DATABASE: cqrs
      MYSQL_USER: user
      MYSQL_PASSWORD: user
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - '3306:3306'
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    # volumes:
    # - file path
    networks:
      - cqrs-network

  db-redis-cqrs:
    image: redis
    container_name: db-redis-cqrs
    ports:
      - '6379:6379'
    restart: always
    networks:
      - cqrs-network

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - '2181:2181'
    networks:
      - cqrs-network

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "cqrs-topic:1:1"
    networks:
      - cqrs-network

#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.3.1
#    container_name: schema-registry
#    restart: unless-stopped
#    depends_on:
#      - kafka
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#
#  kafka-connect:
#    build: docker/kafka-connect
#    container_name: kafka-connect
#    restart: unless-stopped
#    depends_on:
#      - schema-registry
#    ports:
#      - "8083:8083"
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_OFFSET_STORAGE_PARTITIONS: 3
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_STATUS_STORAGE_PARTITIONS: 3
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
#      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
#      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
#      CONNECT_PLUGIN_PATH: "/usr/share/java"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: cqrs-kafka-ui
    ports:
      - '8080:8080'
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - cqrs-network

  cqrs-app:
    container_name: cqrs-app
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
    depends_on:
      - db-mysql-cqrs
      - db-redis-cqrs
      - kafka
    environment:
      spring.datasource.url: "jdbc:mysql://db-mysql-cqrs:3306/cqrs?useSSL=false&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&autoReconnect=true&createDatabaseIfNotExist=true"
    networks:
      - cqrs-network

networks:
  cqrs-network:
    driver: bridge