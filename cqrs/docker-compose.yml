version: "3"

services:
  db-mysql-cqrs:
    image: mysql
    container_name: db-mysql-cqrs
    environment:
      MYSQL_DATABASE: cqrs
      MYSQL_USER: user
      MYSQL_PASSWORD: user
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - '3306:3306'
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    # volumes:
    # - file path
    networks:
      - cqrs-network

  db-redis-cqrs:
    image: redis
    container_name: db-redis-cqrs
    ports:
      - '6379:6379'
    restart: always
    networks:
      - cqrs-network

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - '2181:2181'
    networks:
      - cqrs-network

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "cqrs-topic:1:1"
    networks:
      - cqrs-network

  kafka-connect:
    image: debezium/connect:1.9
    ports:
      - '8083:8083'
    environment:
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-statuses
      BOOTSTRAP_SERVERS: kafka:9092
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    depends_on:
      - kafka
      - zookeeper
      - db-mysql-cqrs
    networks:
      - cqrs-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    ports:
      - '8081:8081'
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    networks:
      - cqrs-network

  debezium-ui:
    image: debezium/debezium-ui
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      - kafka-connect
    ports:
      - '8090:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    networks:
      - cqrs-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: cqrs-kafka-ui
    ports:
      - '8080:8080'
    depends_on:
      - zookeeper
      - kafka
      - kafka-connect
      - schema-registry
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME=kafka-connect
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS=http://kafka-connect:8083
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    networks:
      - cqrs-network

  cqrs-app:
    container_name: cqrs-app
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
    depends_on:
      - db-mysql-cqrs
      - db-redis-cqrs
      - kafka
    environment:
      spring.datasource.url: "jdbc:mysql://db-mysql-cqrs:3306/cqrs?useSSL=false&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&autoReconnect=true&createDatabaseIfNotExist=true"
    networks:
      - cqrs-network

networks:
  cqrs-network:
    driver: bridge